using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lego
{
    class Program
    {
        static void Main(string[] args)
        {
            // declare un jeu de construction de 10 pieces
        Construction maison = new Construction(10);

        // ce jeu a pour premier composant: 59 briques standard
        // une brique standard a par defaut "aucune" comme orientation
        maison.ajouterComposant(new Simple("brique standard"), 59);

        // declare une piece dont le nom est "porte", composee de 2 autres pieces
        Composee porte = new Composee("porte", 2);

        // cette piece composee est constituee de deux pieces simples:
        // un cadran de porte orient'e a gauche
        // un battant orient'e a gauche
        porte.construire(new Simple("cadran porte", "gauche"));
        porte.construire(new Simple("battant", "gauche"));

        // le jeu a pour second composant: 1 porte
        maison.ajouterComposant(porte, 1);

        // déclare une piece composee de 3 autres pieces dont le nom est "fenetre"
        Composee fenetre = new Composee("fenetre", 3);

        // cette piece composee est constitu'ee des trois pieces simples:
        // un cadran de fenetre (aucune orientation)
        // un volet orient'e a gauche
        // un volet orient'e a droite
        fenetre.construire(new Simple("cadran fenetre"));
        fenetre.construire(new Simple("volet", "gauche"));
        fenetre.construire(new Simple("volet", "droit"));

        // le jeu a pour troisieme composant: 2 fenetres
        maison.ajouterComposant(fenetre, 2);

        // affiche tous les composants composants (nom de la piece et quantit'e)
        // pour les pieces compos'ees : affiche aussi chaque piece les constituant
        Console.WriteLine("Affichage du jeu de construction : ");
        Console.WriteLine(maison);

        Console.ReadLine();

        }

        class Piece
        {
            private string nom;

            public Piece(string unNom)
            {
                nom = unNom;
            }

            public string getNom()
            {
                return nom;
            }

            public override string ToString()
            {
                return nom;
            }

        }

        class Composant
        {
            private Piece piece;
            private int quantitePiece;

            public Composant(Piece unePiece, int uneQuantitePiece)
            {
                piece = unePiece;
                quantitePiece = uneQuantitePiece;
            }

            public Piece getPiece()
            {
                return piece;
            }

            public int getQuantite()
            {
                return quantitePiece;
            }
        }

            class Simple : Piece
            {
                private string orientation;

                public Simple(string unNom, string uneOrientation)
                    : base(unNom)
                {
                    orientation = uneOrientation;
                }

                public Simple(string unNom)
                    : base(unNom)
                {
                    orientation = "aucune";
                }

                public string getOrientation()
                {
                    return orientation;
                }

                public override string ToString()
                {
                    if (orientation != "aucune")
                    {
                        return base.ToString() + " " + orientation;
                    }
                    else
                    {
                        return base.ToString();
                    }
                }
            }

            class Composee : Piece
            {
                private int nbMaxiPiece;
                
                private List<Piece> pieceComposee;

                public Composee(string unNom, int unNbMaxiPiece)
                    : base(unNom)
                {
                    nbMaxiPiece = unNbMaxiPiece;
                    pieceComposee = new List<Piece>();
                }

                public int taille()
                {
                    return pieceComposee.Count;
                }

                public int tailleMax()
                {
                    return nbMaxiPiece;
                }

                public void construire(Piece unePiece)
                {
                    if (pieceComposee.Count < nbMaxiPiece)
                    {
                        pieceComposee.Add(unePiece);
                    }
                    else
                    {
                        Console.WriteLine("Construction impossible\n");
                    }
                    
                }

                public override string ToString()
                {
                    string descriptionsPiece = "( ";
                    for (int i = 0; i < pieceComposee.Count; ++i)
                    {
                        if(i == 0)
                        {
                            descriptionsPiece += pieceComposee[i].ToString();
                        } else 
                        {
                             descriptionsPiece += (", " + pieceComposee[i].ToString());
                        }
                       
                    }
                    return base.ToString() + descriptionsPiece + " )";
                    
                }
            }

            class Construction
            {
                private int nbMaxiComposant;
                private List<Composant> construction;

                public Construction(int unNbMaxiComposant)
                {
                    nbMaxiComposant = unNbMaxiComposant;
                    construction = new List<Composant>();
                }

                public int taille()
                {
                    return construction.Count;
                }

                public int tailleMax()
                {
                    return nbMaxiComposant;
                }

                public void ajouterComposant(Piece unePiece, int unNombreComposant)
                {
                    Composant unComposant = new Composant(unePiece, unNombreComposant);

                    if (construction.Count  < nbMaxiComposant)
                    {
                            construction.Add(unComposant);      
                    }
                    else
                    {
                        Console.WriteLine("Ajout de composant impossible\n");
                    }
                }

                public override string ToString()
                {
                    string representationConstruction = "";
                    for (int i = 0; i < construction.Count; ++i)
                    {
                        representationConstruction += (construction[i].getPiece().ToString() + " ( quantité " + construction[i].getQuantite() + ")\n");
                    }

                    return representationConstruction;
                }
            }
        }

    
}
